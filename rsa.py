from Crypto.PublicKey import RSA
from Crypto.Util.number import *
import gmpy2
import math
import codecs

gmpy2.get_context().precision=2048

'''
n=16762077095801589672314890427869401187164086916344025478190347015681606276350033764791052494634438743687378102302129876469874629401611476115475741216444937553471054356393134540670817836743767583241290027522501016180585699330112702613161730012176085574743462096939111910613507008960837373716627558251940473661478520417826486527958422713970123527171162093407894286630360257132145754982872704536638681505413861494861497793838069021603881655804866695522655064013867284791862099373846594743596668718076555604173830911320344662327626095423734160003409379162445204425515220005854125716129645038092738757407899378631925818639
e=3
ct=680743421011289025528116570663434401346100055330917664291933277234946673272819240738058271556651866952133757600342474264098431430806934094210881774544330445850740636390115103888291272814413251733902343068352584818438593495993286735606557132516238714203468366896569712750964765264276183397

p=13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659
q=12930920340230371085700418586571062330546634389230084495106445639925420450591673769061692508272948388121114376587634872733055494744188467315949429674451947
e = 100
ct=19342025705332678125707689469945291643077511152651788313140140411581643217613829967060692967955123916748045362456316118070460609258276392145404801603208972742079211183579954910157166835683252164915667207161801506560718396389021790600424522672736070183262627867454544942039759043780344416236679614416209533810
'''
ct=b'1a8db64e0e171273d5407a04c2ba687273fed19aecb4acbdfd6b0df235ecab857cdfe54f648761bad88b23f7a21811d254573a31601dc282e0073f280c9d3f9d293b74deeeb88615d77bcb088f48148ea981d7c6b4f7db067a873fdf18f5aadbd56738304511ddbc11e00ae9d70d0f4199879c8bdcf1a5d07c9efe2fa02800a714eed2245503b7b90bf4a18bb133897e9f06e174538d40a99affe970c25f25515a2d49b808995785edf489a64fc26b23b4af70c5463e576291ca12eb390f715f46ca95f5a111d83ba1665b80568fe5e6aa102cf5ba5db20d053cb4c8a3e6c194b0bdfb303ab227beceb01ecd672d7b212fa9ffd774fbf7c457ff1cf585374118'
n=10923560081932760392759419101271976251916205965042714361360927360998396102650896680458021597948077776901744236351925897306268319176052984267625827547860646479337035430265490413300660411908018358438620754226599553682916751432020679381880517168163374862633120600299564734518692915387374624935442478872173461030794862762863598537733277517056266949451033814926385767314158454995693320428923283318661247695263181314233544151446297444924494545786597767009802074241551076655700397410638266516094637891166074621589947164411781708889354552994079269499869188636627652111123417986906488158729106216963116527386222738691034606681
e=100
d=47869983169551383868153268570875224035183532771549622100141030852811368672096140217779361410646200789576052496002595071255212664266143293145080811923891122695810748418287788598551977782653065782181996301704449569936679462226641793011166635492864324782114784632361347576702108685250276915894646066481262879849
'''
n=16396703087305792820108003044170373140460230839986814572286798930748650369135976679059249959946540903230558700455839980918475529093728457909768818732087883560235999279989710611769886655820621111982013702948397475685433118900854446354392181849655731859768760364139820663523145839839758386356070564998493081533572467294906163918246633761040680975860712836673550410503368357803637244184073286122490742784233771415606246491179092669469709261837102426081977979700141987577699093249501046397694981109244998722501907677059878168254075755624795423011072446303206605766068159261206358490022764875999520932451157868772013053041
e=65537
ct=11292821426248131341860069032662676309058494995436921569666411524066517290769944738190076413338520448152156467199849955716932801087505551464260061639101034762874870887023114699572068311330560220983472345679170815075644247297377127245148956419701996966077184339012247950936172309577028118142744483518709155907248322168285808940661726764612564540474066225778708097091978847104277866933128074033366863776016876409782845149035585983997981911401303651853433973537479797734483792061202744271337555377363567574955292041231254071671162882084347802092394238154602955827303588962383104365583196352591235220300287685866961172469
d=5405855678584864511101723023259979133099229561310330080159312518068970024961793309190735216512274124480868545108096715865930707190261848880119243577585530312434490996578080735897461601420818169379058700880510616249372925219200787682978346174306291076705122376489145140557923190890911385232702392509917146233278148688895763341043513251889707851351030880461928996716157956161732103131763896084639888232480545106164093148506884786597414350705287093827942820014081760254246060101507948095910773917156453432957855682149574476262770872527762567006755675209967517481402828314660580274976253237514474181861577148979826345985
'''
ct=bytes_to_long(codecs.decode(ct,'hex'))

'''n=p*q
phi=(p-1)*(q-1)
e=math.gcd(e,phi)
ei=100/e
d=inverse(ei,phi)'''
pt=pow(ct,d,n)

plain=gmpy2.root(pt,e)

print(long_to_bytes(pt).decode())

