import math

def ham_dis_bytes(text1:bytes, text2:bytes) -> int:
    dis=0
    for byte1, byte2 in zip(text1,text2):
        dis+=bin(byte1^byte2).count('1')
    return dis

def ham_sc_bytes(text1:bytes, text2:bytes) ->float:
    return ham_dis_bytes(text1, text2)/(8*min(len(text1), len(text2)))
    
def compute(text:bytes) ->int:
    min_sc, keylen=None,None
    for klen in range(2, math.ceil(len(text)/2)):
        chunks=[
            text[i: i+klen]
            for i in range(0, len(text), klen)
            ]
        if len(chunks) >=2 and len(chunks[-1]) <= len(chunks[-2])/2:
            chunks.pop()
        _scores=[]
        for i in range(0,len(chunks)-1,1):
            for j in range(i+1, len(chunks), 1):
                score=ham_sc_bytes(chunks[i], chunks[j])
                _scores.append(score)
                
        score=sum(_scores)/len(_scores)
        if min_sc is None or score < min_sc:
            min_sc, keylen=score, klen
    return keylen

cipher='1d13010c1e4e151c590100395a14135d004513413d1003061654630611155400543c56004d0d0f187e781343395a1e54141b0b44416e430c01134531520e18111d45747a52181a0b0554441d00225f114a3e380a0b4b3d10051a0e45631a101d544369745407081a1d411c555243335e15135615060f2a0b460c011c422c1600501f014f234052050c4912545152433a5611475d1a4508493a44051645482211127a3c0e433f56004c632600175b17527339391353010017536e794e1f0900370000501501447440170849070754795243335d50515115114448275d63311054633b59141b015474581c021e4e02014a524837131940140600054c224949100d452206101e536569735f1e4d1a0b1554581b4d725c1e13521d1701003a58080745572a1e1550190e4b31131a04044e1311511e003a5c0413401c000a002717051f45482a0659181d0200235a0605490f0d18103b00355c041d1a5a6f26553a100116454a36010d5003004e73475209000b6b3c55524a27400413431b0b43546e5400166f6963191c15044f4f3a131a041d1a081a5752483b5e50525a10450c456e47061d4254631610157e265474521b034e1a411a5f524c3b56505a405408054b2b43491e00002000007a3c0a07271301180a064115101a413158154114150b000026554919105337520e1f1a485474571b08632600175b175273393852571f00160144780c5312412f190a501b0100235206081b4e001a5452463e5a1540141d0b4454265549120c52493359121d0800205a1f08490d0911510645201313464e540d010024451a0745442c1c0d50170e523139260c020b1254401e412b560240141b10100039591d1b45482a0159111d0200365c054d0b01157e750445204a50405d1a0208456e511b010a57631b0a50154f4b3d5f1e081b4e0911511600215b1f473e3c04074b2b4248792d4120191c025565683114014d0e010f1a515247374750505501020c546e5500070d4531520a1f1b014526131d1f491a0911101e412656023973111144482743491f0c54371e1c50161a542013100c070004101010597247185614070016562b42491e0a44260018041b1d2a1646064d00490d1810014537131955143d45074120100b160454631a101d7e364527133b4a05024113590445725a04135554160c4f3a3a20540800241b0f191a4f4920131301054e2854571d547c1d5e3976011144482b10030616546305161e531b00305a1767210b411e45015472441f5d13004500492b3a20530e452602591f1a4f483d4706040709411c591f00335d14135c1145134f20171d53014926783004540e493a14064d070141185917003b47505e551f001700235549101759493a1c57074f5321501a4d084e09155319452013115d50540d010024451a0745572c1c5e04540b4931393a0c0a05040611786833501b5646556f20492b1c491b000029070a0454184f3a14064d0d07047e7817003846034714030a0a073a100d1a002a0a521215111f003b5d5205001a151d5e15003a5a1d13551a0144482b101e1c0b0737521d1911656920131304074915545e1d003e5a15135d0045094125551a53084563110b097e27457340521e1c0d095451524833501b564654040a446e580c530f55300659071b0107201316040c64291553194520127a7b55170e01526f721c07454826521305071b00235c1c4a1d4e051d55786837131a46470045134f20171d530149267830501f0a4524131d0349060800441b4e3513185a5954040a446e580c53124f2d550d501006455e7a064d08070f5344524e3d131c5a51540c10002351021616002e17591306162a1c56551e491d1417585241725b11505f111744412054491b000029070a0454184f3a14064d0d07047e741b45725b15135e01161000395f07541100271b1c7a3c0a003e46011949190e1a170600365a15397d540e01453e10061d45482a060d191a08003c5a1f4d08000554581700255c1e144054010d4544791d5304492d550d501a0000385a174d001a411951194521131d561417171d2a06554e00455336111150154f48355019081b4e001a54524837131a46470045134f20171d5301492678311117044526127824491d00031006483b4050585d10450d546e470800454a36010d50000745745c06050c1c4110510b2a1a5213585d1a450b4e6e514900005235170b5003074526565224491b12115452543d13005f550d6f284f215b1a530949281759181d02001d1315180c1d125458170031521d56141604074b0b460c011c422c1600501f014f234052050c4912545152433a5611475d1a4508493a4405164548221112503c0e433f56004c632600175b17527339391353010017536e794e1f0900370000501501447440170849070754795243335d50515115114448275d63311054633b59141b015474581c021e4e02014a524837131940140600054c224949100d452206101e536569735f1e4d1a0b1554581b4d725c1e13521d1701003a58080745572a1e1550190e4b31131a04044e1311511e003a5c0413401c000a002717051f45482a0659181d0200235a0605490f0d18103b00355c041d1a5a6f26553a100116454a36010d5003004e73475209000b6b3c55524a27400413431b0b43546e5400166f6963191c15044f4f3a131a041d1a081a5752483b5e50525a10450c456e47061d4254631610157e265474521b034e1a411a5f524c3b56505a405408054b2b43491e00002000007a3c0a07271301180a064115101a413158154114150b000026554919105337520e1f1a485474571b08632600175b175273393852571f001601443a071a0645631e00021d0c5374411b0a011a4055117800587c1813551a0144482b420c5416003a1d0c0254094c3554484d0f0200134b21100d462f585a44123b527d405a471113272d12430d305864410f'
po=bytes(cipher, encoding='utf8')
kom=compute(po)

print(kom)
