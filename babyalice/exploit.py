# your code goes here
from Crypto.PublicKey import RSA
from Crypto.Util.number import *
 
def crt(list_a, list_m):
    for i in range(len(list_m)):
        for j in range(len(list_m)):
            if GCD(list_m[i], list_m[j])!= 1 and i!=j:
                return None
    M = 1
    for i in list_m:
        M *= i
    list_b = [M/i for i in list_m]
    assert len(list_b) == len(list_m)
    list_b_inv = [inverse(list_b[i], list_m[i]) for i in range(len(list_m))]
    x = 0
    for i in range(len(list_m)):
        x += list_a[i]*list_b[i]*list_b_inv[i]
    return x % M
 

N1 = 499795193308049138808570945696387289874119832358539620801430788624782549473065836244596521327260368551860734946264862223993848622137242403724897999727957974381953991246274020854749306201585920190525301219304844806344783927921109781726334716579305235202895091072706984260292033155913116347015540703764332924709647126284723563473196146966846953474788278646476722426699618618983718886910005568128748282914719433661956571306774933264995033855501238854403085187803762447811410160711881520044517442018486799330170276184983263168663502764139510102688780673676571524798623971025295303441298278526309905444400709391050022704869
e1 = 656506809
N2 = 302785337204341301926996418735736099660010712297423196204444558248502753636733385325366614992052038675160435684040841415703395145143642123799189152476274532598030361221866162127832780235252797017162079082115726957408904472033759868594288572978545542452317728952043503674725315719961060469450020754090299017326306586827990099907471443585259322794463697997205654438793016421603371821120084564436188242597449758420801890375553379371572683652033573979862339813065869205775461521277215399225253154824807543277758323066128997161080255197242055659039736364268751053053843637190716932383192357165383989513658479377378617016811
e2 = 885335741

ct1 = bytes_to_long('\x07\xc3\x82\xb7\x87~\x10\xc7*\xd4\xfc$`\xdc\x8f\xcdw\xfaH\x1f3\x01\xdc\xf6\xd2YA\xea\xdf\x83xf\x90\xb9\xec\xb0y\xd1\xc1w\'\x8aq,\xcfLV\xeb;Wi\xc7 \x02\x94{\xf7\xa1\x01$\x7fL\xcd\xe7oN\xe8\x1b\xac\x93\x05\x0b\xbe\x8c\xfa\xa9\xd10\x84\xdc\x9b\xf4\x9b\xf89z\xa2\x05wN\xd3\x966\x1a\xa4"\x13\xb4\xeb\x9e\x14\xdf\xa3SY\x9cF]\x0e\xe0\x8ej\x10\xac\x94\xa5\x88\xba\xf0\xdf\xa4R\xfc\xe9\xd0A\xd9\xb1\x93y\xfcs\xa5C\xf2\xf5\xb9\x9b\x84\xe0\xff\xdb`d\xb9\xd6^\xf2-\xc3c\xb9"\xf3\x909H3\x9e|\x95\x92\xe3\xc7#[q\xea\xb98\x0c\xf4 \xb1;\x16}6\xca\x95oc\x82_\xc8\xdc&\x84\xb7\xa5\x9f\x88\x8aJ\x07\'\x9a*\x12\xbfV\xeb\x13\xa1\xd8_~\x8b\xbb\xfb\xfd\xe9\x10\xd0\x17\x17\xce.\x8aJ\x03"\x07 \x87a\xab\x9cp\xce\xe6)\xb6\xd9\x13:c\xd13\xd5\x8e\xc3\xc6\xe5G\xeb[\xfez\x8d\xcdT\xfe^m$\xf5')
ct2 = bytes_to_long('\x0ca\xabD\x95\x99\xcf2\xc1\x1a?\xd1\xec\xbeh\xa9\xaf\x078\tx.\xb6\xf1\xc1\xf4nC\x92\x0e\xf6\x81\xf08\x13g1\xca\xe9;\xfe\xc1\xec\xe8t\x93\x12K\x00i\xce[#\x897a;\xd6\x17\xc0B[\xb5HBE}\\\xaeb@\x89\x95oW\x1aa\xba\xa1\xdf~\x11\xa2>\x88\xb2\xd3J"n\x97\xe7\x9f5\x19\x92\xec>E\xf1\x92\xccK)\xbe\x91(\xd9\xeb\xf4\xf4\x10&*C\xb7\x99\x8aDJ\x94\x81\x12[\xe8\x0c\xff\xfe\x81\x85&\xa0\xfb\x1c\xfeQ[\xd5\xa0\xec\xb9*\xf5\x88$-2\xeb\x11d\x19\xe6\xce\x86C\x93O\x18\xef$\xbd\xf0\xf2NF\xbc\x88\xfd\xd1#\xffw\x8e\x12\xfd\xa0\xd5\xd6_%\xc7\x91w\x90\xa6\xff\xc5\x89Y\xa8\x94\xe1\x80G\x98V\x8cP\xc4#\xab\xe3`8\x19\xe3\xc1c.\xc8\xb1\xccPW\x0bUp\x8c\xf5\x1eNqA|\x94\xafQ~\xb5y\x919\rw\xa5\x08\x80m\xb4\xab\x9a\t\xb5\xc6\xa8\x00\xe4\xabU\x05\x13\xff\xe0{\x99\x8e')
 
q1 = 3807106592404975601125033090180503344264174569255897409284423052897092445417674962362221548320775037781978870632221456368716628390293018864172214774714465531462065303179649214122810035176785416262624632995978331814185099550531145861149188438984893130980572838590794755709091002422200644150512364254454557260789
assert N1 % q1 == 0
p1 = N1 / q1
 
q2 = 2751296681586435626720222057380271100763911689072786354291138095461126286215853115732617512578076591584325152559069002543980487680247274388725342124525719292925128397536955722536120578433729304047954769670529111876899791612062118642496846657307745240072073877747762856779534078553583788593091249350529237188097
assert N2 % q2 == 0
p2 = N2 / q2
 
assert GCD(e1, (p1-1)) == 1
assert GCD(e2, (p2-1)) == 1
 
d1 = inverse(e1, (p1-1))
d2 = inverse(e2, (p2-1))
print "d1: ", d1
print "d2: ", d2
a1 = pow(ct1, d1, p1)
a2 = pow(ct2, d2, p2)
print long_to_bytes(crt([a1, a2], [p1, p2]))
